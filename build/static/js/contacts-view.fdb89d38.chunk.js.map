{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","loginInputNameId","loginInputNamberId","useState","name","setName","handleChangeName","useCallback","event","target","number","setNumber","handleChangeNumber","items","useSelector","getItems","handleSubmit","preventDefault","some","contact","alert","addContact","className","onSubmit","htmlFor","type","pattern","title","required","onChange","ContactList","children","ContactItem","contactsItems","getFilteredContactList","map","onClick","deleteContact","onDelete","Filter","getFilterValue","changeFilter","ContactsView","useEffect","fetchContacts"],"mappings":"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","file":"static/js/contacts-view.fdb89d38.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","/* import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'; */\r\nimport React, { useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { addContact, getItems } from '../../redux/contacts';\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function ContactForm () {\r\n  \r\n  const dispatch = useDispatch();\r\n  const loginInputNameId = nanoid();\r\n  const loginInputNamberId = nanoid();\r\n  \r\n  const [name, setName] = useState('');\r\n  const handleChangeName = useCallback(event => {\r\n    setName(event.target.value);\r\n  }, []);\r\n\r\n  const [number, setNumber] = useState('');\r\n  const handleChangeNumber = useCallback(event => {\r\n    setNumber(event.target.value);\r\n  }, []);\r\n\r\n  const items = useSelector(getItems);\r\n\r\n  const handleSubmit = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n      const addInputValue = contact => contact.name === name || contact.number === number;\r\n\r\n      if (items.some(addInputValue)) {\r\n        alert(`Contact is already in contacts`);\r\n        return;\r\n      }\r\n\r\n      dispatch(addContact({ name, number }));\r\n\r\n      setName('');\r\n      setNumber('');\r\n    },\r\n    [dispatch, items, name, number],\r\n  );\r\n  \r\n  return (\r\n    <section className=\"sectionFormContacts\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor={loginInputNameId}>Name</label>\r\n          \r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          id = {loginInputNameId}\r\n          value={name}\r\n          onChange = {handleChangeName}\r\n                \r\n        />\r\n        \r\n\r\n        <label htmlFor={loginInputNamberId}>Number</label>\r\n          \r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          id = {loginInputNamberId}\r\n          value={number}\r\n          onChange = {handleChangeNumber}\r\n        />\r\n        \r\n                  \r\n        <button type=\"submit\" className=\"btn btnForm\">Add contact</button>\r\n      </form>\r\n    </section>\r\n\r\n  )\r\n  \r\n}","import PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ children }) => (\r\n  <ul className=\"contactList\">{children}</ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactList;\r\n\r\n","import PropTypes from 'prop-types';\r\n/* import { connect } from 'react-redux'; */\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { deleteContact, getFilteredContactList } from '../../redux/contacts';\r\n\r\nexport default function ContactItem() {\r\n\r\n  const dispatch = useDispatch();\r\n  const contactsItems = useSelector(getFilteredContactList);\r\n  const onDelete = id => dispatch(deleteContact(id));\r\n\r\n  return (\r\n    <>\r\n      {contactsItems.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className=\"liContactsItems\">\r\n            <p className=\"contactsItems\">{`${name}: ${number}`}</p>\r\n            <button type=\"button\" onClick={() => onDelete(id)} className=\"btn\">\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n","import { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter, getFilterValue } from '../../redux/contacts';\r\n\r\nexport default function Filter() {\r\n\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilterValue);\r\n  const onChange = useCallback(\r\n    event => dispatch(changeFilter(event.target.value)),\r\n    [dispatch],\r\n  );  \r\n\r\n  return (\r\n    <label className=\"filter\">\r\n      Find contacts by name\r\n      <div >\r\n        <input type=\"text\" value={value} onChange={onChange}></input>\r\n      </div>\r\n    \r\n    </label>\r\n  );\r\n\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport ContactForm from '../components/ContactForm'\r\nimport ContactList from '../components/ContactList'\r\nimport ContactItem from '../components/ContactItem';\r\nimport Filter from '../components/Filter'\r\n\r\nimport { fetchContacts } from '../redux/contacts/contacts-operations';\r\nimport { getItems } from '../redux/contacts/contacts-selectors';\r\n\r\nexport default function ContactsView () {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const items = useSelector(getItems);\r\n  return (\r\n    <>\r\n      <h1 className=\"titleContacts\">Phonebook</h1>\r\n      <ContactForm/>\r\n      <h2>Contacts</h2>\r\n  \r\n      {items.length > 0 ? (\r\n        <>\r\n          <Filter />\r\n          <ContactList>\r\n            <ContactItem />\r\n          </ContactList>\r\n        </>\r\n      ) : (\r\n        <span>You have no contacts!</span>\r\n      )}\r\n    </>\r\n  )\r\n\r\n};\r\n"],"sourceRoot":""}